// <auto-generated />
using System;
using Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Database.Migrations
{
    [DbContext(typeof(BarOMeterContext))]
    [Migration("20190329125905_PRJ-NoPaswords-v1.1")]
    partial class PRJNoPaswordsv11
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Database.Bar", b =>
                {
                    b.Property<string>("BarName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(150);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int>("AgeLimit");

                    b.Property<double>("AvgRating");

                    b.Property<int>("CVR")
                        .HasMaxLength(8);

                    b.Property<string>("Educations")
                        .HasMaxLength(255);

                    b.Property<string>("Email")
                        .HasMaxLength(150);

                    b.Property<string>("LongDescription")
                        .HasMaxLength(2500);

                    b.Property<int>("PhoneNumber")
                        .HasMaxLength(10);

                    b.Property<string>("ShortDescription")
                        .HasMaxLength(500);

                    b.HasKey("BarName");

                    b.HasIndex("CVR")
                        .IsUnique();

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.ToTable("Bar");
                });

            modelBuilder.Entity("Database.BarEvent", b =>
                {
                    b.Property<string>("BarName")
                        .HasMaxLength(150);

                    b.Property<string>("EventName")
                        .HasMaxLength(75);

                    b.Property<DateTime>("Date");

                    b.HasKey("BarName", "EventName");

                    b.ToTable("BarEvents");
                });

            modelBuilder.Entity("Database.BarRepresentative", b =>
                {
                    b.Property<string>("Username")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50);

                    b.Property<string>("BarName")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.HasKey("Username");

                    b.HasIndex("BarName");

                    b.ToTable("Barrepresentatives");
                });

            modelBuilder.Entity("Database.Coupon", b =>
                {
                    b.Property<string>("CouponID")
                        .HasMaxLength(50);

                    b.Property<string>("BarName")
                        .HasMaxLength(150);

                    b.Property<DateTime>("ExpirationDate");

                    b.HasKey("CouponID", "BarName");

                    b.HasIndex("BarName");

                    b.ToTable("Coupons");
                });

            modelBuilder.Entity("Database.Customer", b =>
                {
                    b.Property<string>("Username")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50);

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("FavoriteBar")
                        .HasMaxLength(150);

                    b.Property<string>("FavoriteDrink")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.HasKey("Username");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Database.Drink", b =>
                {
                    b.Property<string>("BarName")
                        .HasMaxLength(150);

                    b.Property<string>("DrinksName")
                        .HasMaxLength(50);

                    b.Property<double>("Price");

                    b.HasKey("BarName", "DrinksName");

                    b.ToTable("Drinks");
                });

            modelBuilder.Entity("Database.Review", b =>
                {
                    b.Property<string>("BarName")
                        .HasMaxLength(150);

                    b.Property<string>("Username")
                        .HasMaxLength(50);

                    b.Property<int>("BarPressure");

                    b.HasKey("BarName", "Username");

                    b.HasIndex("Username");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Database.BarEvent", b =>
                {
                    b.HasOne("Database.Bar", "Bar")
                        .WithMany("BarEvents")
                        .HasForeignKey("BarName")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.BarRepresentative", b =>
                {
                    b.HasOne("Database.Bar", "Bar")
                        .WithMany("Barrepresentatives")
                        .HasForeignKey("BarName")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Coupon", b =>
                {
                    b.HasOne("Database.Bar", "Bar")
                        .WithMany("Coupons")
                        .HasForeignKey("BarName")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Drink", b =>
                {
                    b.HasOne("Database.Bar", "Bar")
                        .WithMany("Drinks")
                        .HasForeignKey("BarName")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Review", b =>
                {
                    b.HasOne("Database.Bar", "Bar")
                        .WithMany("Reviews")
                        .HasForeignKey("BarName")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Customer", "Customer")
                        .WithMany("Reviews")
                        .HasForeignKey("Username")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
