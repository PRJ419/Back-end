// <auto-generated />
using System;
using Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Database.Migrations
{
    [DbContext(typeof(BarOMeterContext))]
    [Migration("20190427114516_DataSeedsAdded")]
    partial class DataSeedsAdded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Database.Bar", b =>
                {
                    b.Property<string>("BarName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(150);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int>("AgeLimit");

                    b.Property<double>("AvgRating");

                    b.Property<int>("CVR");

                    b.Property<string>("Educations")
                        .HasMaxLength(255);

                    b.Property<string>("Email")
                        .HasMaxLength(150);

                    b.Property<string>("Image");

                    b.Property<string>("LongDescription")
                        .HasMaxLength(2500);

                    b.Property<int>("PhoneNumber");

                    b.Property<string>("ShortDescription")
                        .HasMaxLength(500);

                    b.HasKey("BarName");

                    b.HasIndex("CVR")
                        .IsUnique();

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.ToTable("Bar");

                    b.HasData(
                        new
                        {
                            BarName = "Katrines Kælder",
                            Address = "5125 Edison, Finlandsgade 22, 8200 Aarhus",
                            AgeLimit = 18,
                            AvgRating = 5.0,
                            CVR = 33985703,
                            Educations = "IKT,EE,E,ST",
                            Email = "katrineskaelder@outlook.dk",
                            LongDescription = "Der er mange øl",
                            PhoneNumber = 12345678,
                            ShortDescription = "Der er øl"
                        },
                        new
                        {
                            BarName = "Medicinsk Fredagsbar - Umbilicus",
                            Address = "Medicinerhuset, Bygning 1161, Ole Worms Allé 4, 8000 Aarhus",
                            AgeLimit = 18,
                            AvgRating = 3.0,
                            CVR = 29129932,
                            Educations = "Medicin",
                            Email = "bestyrelsen@umbi.dk",
                            LongDescription = "Der er alt for mange mennesker og alt for få øl",
                            PhoneNumber = 51927090,
                            ShortDescription = "Der er varme øl"
                        });
                });

            modelBuilder.Entity("Database.BarEvent", b =>
                {
                    b.Property<string>("BarName")
                        .HasMaxLength(150);

                    b.Property<string>("EventName")
                        .HasMaxLength(75);

                    b.Property<DateTime>("Date");

                    b.Property<string>("Image");

                    b.HasKey("BarName", "EventName");

                    b.ToTable("BarEvents");

                    b.HasData(
                        new
                        {
                            BarName = "Katrines Kælder",
                            EventName = "Tobias tager Level Up",
                            Date = new DateTime(2019, 4, 26, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BarName = "Medicinsk Fredagsbar - Umbilicus",
                            EventName = "Andreas på tur!",
                            Date = new DateTime(2019, 5, 29, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Database.BarRepresentative", b =>
                {
                    b.Property<string>("Username")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50);

                    b.Property<string>("BarName")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.HasKey("Username");

                    b.HasIndex("BarName");

                    b.ToTable("BarRepresentatives");

                    b.HasData(
                        new
                        {
                            Username = "Legend27",
                            BarName = "Katrines Kælder",
                            Name = "Ole Ølmave"
                        },
                        new
                        {
                            Username = "Kratluskeren",
                            BarName = "Medicinsk Fredagsbar - Umbilicus",
                            Name = "Tørstige Torsten"
                        });
                });

            modelBuilder.Entity("Database.Coupon", b =>
                {
                    b.Property<string>("CouponID")
                        .HasMaxLength(50);

                    b.Property<string>("BarName")
                        .HasMaxLength(150);

                    b.Property<DateTime>("ExpirationDate");

                    b.HasKey("CouponID", "BarName");

                    b.HasIndex("BarName");

                    b.ToTable("Coupons");

                    b.HasData(
                        new
                        {
                            CouponID = "123ØL",
                            BarName = "Katrines Kælder",
                            ExpirationDate = new DateTime(2019, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CouponID = "VarmØlNuTak",
                            BarName = "Medicinsk Fredagsbar - Umbilicus",
                            ExpirationDate = new DateTime(2019, 7, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Database.Customer", b =>
                {
                    b.Property<string>("Username")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50);

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("FavoriteBar")
                        .HasMaxLength(150);

                    b.Property<string>("FavoriteDrink")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.HasKey("Username");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Username = "Bodega Bent",
                            DateOfBirth = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "JegElskerØl@Yahoo.com",
                            FavoriteBar = "Katrines Kælder",
                            FavoriteDrink = "Fadøl",
                            Name = "Bent"
                        },
                        new
                        {
                            Username = "Dehydrerede Dennis",
                            DateOfBirth = new DateTime(1990, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "JegErTørstig@gmail.com",
                            FavoriteBar = "Medicinsk Fredagsbar - Umbilicus",
                            FavoriteDrink = "Vodka Redbull",
                            Name = "Dennis"
                        });
                });

            modelBuilder.Entity("Database.Drink", b =>
                {
                    b.Property<string>("BarName")
                        .HasMaxLength(150);

                    b.Property<string>("DrinksName")
                        .HasMaxLength(50);

                    b.Property<string>("Image");

                    b.Property<double>("Price");

                    b.HasKey("BarName", "DrinksName");

                    b.ToTable("Drinks");

                    b.HasData(
                        new
                        {
                            BarName = "Katrines Kælder",
                            DrinksName = "Spejlæg",
                            Price = 50.0
                        },
                        new
                        {
                            BarName = "Katrines Kælder",
                            DrinksName = "Flaskeøl",
                            Price = 10.0
                        },
                        new
                        {
                            BarName = "Katrines Kælder",
                            DrinksName = "Fadøl",
                            Price = 20.0
                        },
                        new
                        {
                            BarName = "Medicinsk Fredagsbar - Umbilicus",
                            DrinksName = "Ceres Top",
                            Price = 10.0
                        },
                        new
                        {
                            BarName = "Medicinsk Fredagsbar - Umbilicus",
                            DrinksName = "Vodka Redbull",
                            Price = 20.0
                        },
                        new
                        {
                            BarName = "Medicinsk Fredagsbar - Umbilicus",
                            DrinksName = "Hospitalssprit",
                            Price = 10.0
                        });
                });

            modelBuilder.Entity("Database.Review", b =>
                {
                    b.Property<string>("BarName")
                        .HasMaxLength(150);

                    b.Property<string>("Username")
                        .HasMaxLength(50);

                    b.Property<int>("BarPressure");

                    b.HasKey("BarName", "Username");

                    b.HasIndex("Username");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            BarName = "Katrines Kælder",
                            Username = "Bodega Bent",
                            BarPressure = 5
                        },
                        new
                        {
                            BarName = "Medicinsk Fredagsbar - Umbilicus",
                            Username = "Bodega Bent",
                            BarPressure = 3
                        },
                        new
                        {
                            BarName = "Katrines Kælder",
                            Username = "Dehydrerede Dennis",
                            BarPressure = 5
                        },
                        new
                        {
                            BarName = "Medicinsk Fredagsbar - Umbilicus",
                            Username = "Dehydrerede Dennis",
                            BarPressure = 3
                        });
                });

            modelBuilder.Entity("Database.BarEvent", b =>
                {
                    b.HasOne("Database.Bar", "Bar")
                        .WithMany("BarEvents")
                        .HasForeignKey("BarName")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.BarRepresentative", b =>
                {
                    b.HasOne("Database.Bar", "Bar")
                        .WithMany("BarRepresentatives")
                        .HasForeignKey("BarName")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Coupon", b =>
                {
                    b.HasOne("Database.Bar", "Bar")
                        .WithMany("Coupons")
                        .HasForeignKey("BarName")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Drink", b =>
                {
                    b.HasOne("Database.Bar", "Bar")
                        .WithMany("Drinks")
                        .HasForeignKey("BarName")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Review", b =>
                {
                    b.HasOne("Database.Bar", "Bar")
                        .WithMany("Reviews")
                        .HasForeignKey("BarName")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Customer", "Customer")
                        .WithMany("Reviews")
                        .HasForeignKey("Username")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
